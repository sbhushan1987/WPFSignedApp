# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
- task: MSBuild@1
  inputs:
    solution: '**/*.sln'
    msbuildArguments: '/target:publish /p:OutputPath="$(Build.ArtifactStagingDirectory)\Publish\\"'
    clean: true
    createLogFile: true
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)\Publish\
    artifactName: WPFApp
- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    Contents: |
      **\bin\**\*.exe
      **\bin\**\*.dll
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'wpfsignconn'
    keyVaultName: 'wpfsign'    
- powershell: |
    $filePath = '$(Build.ArtifactStagingDirectory)\bin\Release\WPFSignedApp.exe';
    $base64 = '$(cert2)';
    $buffer = [System.Convert]::FromBase64String($base64);
    $certificate = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($buffer);
    Set-AuthenticodeSignature -FilePath $filePath -Certificate $certificate;

